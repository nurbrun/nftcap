{"version":3,"sources":["components/ChartArea.js","components/services/GenerateURL.js","App.js","reportWebVitals.js","index.js"],"names":["ChartArea","chartContainerRef","useRef","chart","resizeObserver","useState","timer","setTimer","areaSeries","itemInput","setItemInput","templateName","setTemplateName","issuedSupply","setIssuedSupply","adjustedSupply","setAdjustedSupply","lastSalePrice","setLastSalePrice","marketCap","setMarketCap","burnTotal","setBurnTotal","dataURL","setDataURL","salesURL","setSalesURL","BurnURL","setBurnURL","templateID","setTemplateID","collectionName","setCollectionName","setApiResponse","formatFloat","float","precision","Intl","NumberFormat","maximumFractionDigits","minimumFractionDigits","format","useEffect","replace","templateInput","templateSalesURL","apiResponse","axios","get","then","response","JSON","stringify","data","current","setData","responseCount","length","price","allSalePrices","parseFloat","toFixed","forEach","sale","formattedPrice","push","update","time","block_time","value","minMax","arr","min","max","i","getMinMax","applyOptions","autoscaleInfoProvider","priceRange","minValue","maxValue","timeScale","fitContent","catch","error","collection","name","template","immutable_data","issued_supply","console","log","burnDataURL","burned","createChart","width","clientWidth","height","clientHeight","handleScroll","handleScale","layout","backgroundColor","textColor","grid","vertLines","color","visible","labelVisible","horzLines","crosshair","mode","CrosshairMode","Normal","priceScale","borderColor","autoScale","timeVisible","secondsVisible","addAreaSeries","setTimeout","prevstate","ResizeObserver","entries","contentRect","observe","disconnect","style","paddingTop","paddingBottom","Grid","container","align","justifyContent","alignItems","item","xs","sm","md","className","fontSize","action","onSubmit","e","preventDefault","target","elements","htmlFor","type","onChange","event","placeholder","id","textAlign","borderRadius","border","borderTopLeftRadius","borderBottomLeftRadius","Button","variant","borderTopRightRadius","borderBottomRightRadius","ref","App","basename","process","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b896768.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport WhatshotTwoToneIcon from '@material-ui/icons/WhatshotTwoTone';\nimport { createChart, CrosshairMode } from 'lightweight-charts';\nimport axios from 'axios'\nimport { templateSalesURL, templateDataURL, burnDataURL } from './services/GenerateURL';\nimport './styles.css';\n\nconst ChartArea = () => {\n  const chartContainerRef = useRef();\n  const chart = useRef();\n  const resizeObserver = useRef();\n  const [timer, setTimer] = useState(0);\n  let areaSeries = useRef();\n  const [itemInput, setItemInput] = useState(''); \n  const [templateName, setTemplateName] = useState('');\n  const [issuedSupply, setIssuedSupply] = useState('');\n  const [adjustedSupply, setAdjustedSupply] = useState('');\n  const [lastSalePrice, setLastSalePrice] = useState('');\n  const [marketCap, setMarketCap] = useState('');\n  const [burnTotal, setBurnTotal] = useState('');\n  const [dataURL,setDataURL] = useState('')\n  const [salesURL,setSalesURL] = useState('')\n  const [BurnURL, setBurnURL] = useState('');\n  const [templateID, setTemplateID] = useState(19553);\n  const [collectionName, setCollectionName] = useState('alien.worlds');\n  const [apiResponse, setApiResponse] = useState([]);\n  // const [templateImage, setTemplateImage] = useState('');\n  // const imgURLBase = \"https://ipfs.atomichub.io/ipfs/\";\n  // const imgURLBase = \"https://resizer.atomichub.io/images/v1/preview?ipfs=\";\n\n  useEffect(()=>{\n    setDataURL(templateDataURL(templateID))\n    setSalesURL(templateSalesURL(templateID))\n  }, [templateID])\n\n  useEffect(apiResponse => {\n    axios.get(salesURL)\n        .then((response) => {\n          if (JSON.stringify(response.data.data) !== JSON.stringify(apiResponse)){\n            areaSeries.current.setData([])\n            setApiResponse(response.data.data)\n            let responseCount = response.data.data.length-1\n            let lastSalePrice = response.data.data[responseCount].price / 100000000\n            let allSalePrices = []\n            setLastSalePrice(parseFloat(lastSalePrice).toFixed(2))\n            response.data.data.forEach(function(sale) { \n              const formattedPrice = (sale.price / 100000000).toFixed(2);\n              allSalePrices.push(parseFloat(formattedPrice))\n              areaSeries.current.update(\n                { time: sale.block_time/1000, value: formattedPrice },\n              )\n            });\n            let minMax = getMinMax(allSalePrices)\n            areaSeries.current.applyOptions({\n              autoscaleInfoProvider: () => ({\n                  priceRange: {\n                      minValue: minMax.min,\n                      maxValue: minMax.max,\n                  },\n              }),\n            });\n            // setTimeout(() => {\n              chart.current.timeScale().fitContent();\n            // }, 0);\n          }\n        })\n        .catch(function (error){\n        })\n  }, [salesURL])\n\n  useEffect(() => {\n    axios.get(dataURL)\n      .then((response) => {\n        setCollectionName(response.data.data[0].collection.name)\n        setTemplateName(response.data.data[0].template.immutable_data.name)\n        // setTemplateImage(imgURLBase+response.data.data[0].template.immutable_data.img+\"&size=370\")          \n        // setTemplateImage(imgURLBase+response.data.data[0].template.immutable_data.img)\n        setIssuedSupply(response.data.data[0].template.issued_supply)\n      })\n      .catch(function (error){\n        console.log(error)\n      })\n  }, [dataURL])\n\n  useEffect(() =>{\n    setBurnURL(burnDataURL(templateID, collectionName))\n  }, [collectionName])\n\n  useEffect(() =>{\n    axios.get(BurnURL)\n      .then((response) => {\n        setBurnTotal(response.data.data.burned)\n      })\n      .catch(function (error){\n        console.log(error)\n      })\n  }, [BurnURL])\n\n  useEffect(()=>{\n    if(lastSalePrice === \"\" || issuedSupply === \"\"){\n      return\n    } else {\n      // Calculate and format market cap \n      let marketCap = parseFloat(lastSalePrice*(issuedSupply-burnTotal)).toFixed(2)\n      setMarketCap(marketCap)\n      // setIssuedSupply(issuedSupply)\n      setAdjustedSupply(issuedSupply-burnTotal)\n    }\n  }, [lastSalePrice, issuedSupply, burnTotal])\n\n  useEffect(() => {\n    chart.current = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: chartContainerRef.current.clientHeight,\n      handleScroll: true,\n      handleScale: true,\n      layout: {\n        backgroundColor: '#253248',\n        textColor: 'rgba(255, 255, 255, 0.9)',\n      },\n      grid: {\n        vertLines: {\n          color: '#334158',\n          visible: false,\n          labelVisible: false,\n        },\n        horzLines: {\n          color: '#334158',\n          visible: false,\n          labelVisible: false,\n        },\n      },\n      crosshair: {\n        mode: CrosshairMode.Normal,\n      },\n      priceScale: {\n        borderColor: '#485c7b',\n        autoScale: true,\n      },\n      timeScale: {\n        borderColor: '#485c7b',\n        timeVisible: true,\n        secondsVisible: false,\n      },\n    });\n    areaSeries.current = chart.current.addAreaSeries({});\n  }, []);\n\n  useEffect(() => {\n      setTimeout(() =>{\n          setTimer(prevstate => prevstate+1);\n      }, 5000)\n  }, [timer])\n\n  // Resize chart on container resizes.\n  useEffect(() => {\n    resizeObserver.current = new ResizeObserver(entries => {\n      const { width, height } = entries[0].contentRect;\n      chart.current.applyOptions({ width, height });\n      setTimeout(() => {\n        chart.current.timeScale().fitContent();\n      }, 0);\n    });\n    resizeObserver.current.observe(chartContainerRef.current);\n    return () => resizeObserver.current.disconnect();\n  }, []);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const templateInput = e.target.elements[0].value;\n    setTemplateID(templateInput)\n  }\n\n  function formatFloat(float, precision) {\n    let formattedFloat;\n    formattedFloat = new Intl.NumberFormat('en',{ \n      maximumFractionDigits: precision, \n      minimumFractionDigits: precision, \n    }).format(float)\n    return formattedFloat\n  }\n\n  function getMinMax(arr) {\n    let min = arr[0];\n    let max = arr[0];\n    let i = arr.length;\n    while (i--) {\n      min = arr[i] < min ? arr[i] : min;\n      max = arr[i] > max ? arr[i] : max;\n    }\n    return { min, max };\n  }\n\n  return (\n    <>\n    <div style={{paddingTop:15,paddingBottom:15, backgroundColor:\"#253248\", color:\"white\", }}>\n      <Grid container align = \"center\" justifyContent = \"center\" alignItems = \"center\">\n        <Grid item xs={12} sm={12} md={2} className=\"grid-item\">\n          <code>{collectionName}</code>          \n          <h3>{templateName}</h3>\n        </Grid>\n        {/* <Grid item xs={12} sm={12} md={1} className=\"grid-item\">\n          <img src={templateImage} alt={templateName} width=\"100px\"/>\n        </Grid>*/}\n        <Grid item xs={12} sm={4} md={2} className=\"grid-item\">\n          <code>Supply</code>\n          <h3>\n            {formatFloat(adjustedSupply, 0)} <small>({formatFloat(burnTotal, 0)}<WhatshotTwoToneIcon className=\"burn-icon\" fontSize=\"small\"/>)</small>\n          </h3>\n          <div>\n            <h5></h5>\n          </div>\n        </Grid>\n        <Grid item xs={12} sm={4} md={2} className=\"grid-item\">\n          <code>Last Sale Price</code>\n          <h3>{formatFloat(lastSalePrice, 2)} WAX</h3>\n        </Grid>\n        <Grid item xs={12} sm={4} md={2} className=\"grid-item\">\n          <code>Market Cap</code>\n          <h3>{formatFloat(marketCap, 2)} WAX</h3> \n        </Grid>\n        <Grid item xs={12} sm={12} md={3} className=\"grid-item\">\n          <form action=\"\" onSubmit={handleSubmit}>\n            <label htmlFor=\"\">\n              <input type=\"text\" onChange={event => setItemInput(event.target.value)} value={itemInput} placeholder=\"Enter Template ID\" name=\"\" id=\"\" style={{height: 31, width: 115, textAlign: 'center', borderRadius: '0px', border: 'none', borderTopLeftRadius:\"2px\",borderBottomLeftRadius:\"2px\"}} />\n            </label>    \n            <Button variant=\"contained\" color=\"primary\" type=\"submit\" style={{borderRadius: \"0px\",backgroundColor: \"#2b8660\", fontSize:\"12px\",borderTopRightRadius:\"2px\",borderBottomRightRadius:\"2px\"}}>\n              <code>Search</code>\n            </Button>\n          </form>\n        </Grid>\n      </Grid>\n    </div>\n    <div ref={chartContainerRef} className=\"chart-container\" />\n    </>\n  );\n}\n\nexport default ChartArea","export function accountURL(accountInput) {\n  const URLSchematic = \"https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={{walletAddres}}\";\n  return URLSchematic.replace('{{walletAddres}}',accountInput)\n}\nexport function baseURL(accountInput) {\n  const URLSchematic = \"https://wax.api.atomicassets.io/atomicassets/v1/assets?owner={{walletAddres}}\";\n  return URLSchematic.replace('{{walletAddres}}',accountInput)\n}\n\nexport function templateSalesURL(templateInput) {\n  const URLSchematic = \"https://wax.api.atomicassets.io/atomicmarket/v1/prices/sales?template_id={{templateID}}\";\n  return URLSchematic.replace('{{templateID}}',templateInput)\n}\n\nexport function templateDataURL(templateInput) {\n  const URLSchematic = \"https://wax.api.atomicassets.io/atomicassets/v1/assets?template_id={{templateID}}&page=1&limit=1&order=desc&sort=asset_id\";\n  return URLSchematic.replace('{{templateID}}',templateInput)\n}\n\nexport function burnDataURL(templateInput, collectionName) {\n  const URLSchematic = \"https://wax.api.atomicassets.io/atomicassets/v1/templates/{{collectionName}}/{{templateID}}/stats\";\n  // debugger;\n  return URLSchematic.replace('{{templateID}}',templateInput).replace('{{collectionName}}',collectionName)\n}\n","import './App.css';\nimport ChartArea from './components/ChartArea';\nimport { HashRouter as Router } from 'react-router-dom'\nimport {Switch, Route} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <>\n    <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route exact path=\"/\">\n                <div className=\"App\">\n                    <ChartArea />\n                </div>\n            </Route>\n        </Switch>\n    </Router>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\nReactDOM.render(\n  <App />, \ndocument.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}