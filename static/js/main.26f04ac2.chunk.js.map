{"version":3,"sources":["components/services/GenerateURL.js","components/ChartArea.js","App.js","reportWebVitals.js","index.js"],"names":["templateSalesURL","templateInput","replace","templateDataURL","ChartArea","chartContainerRef","useRef","chart","resizeObserver","useState","timer","setTimer","apiResponse","setApiResponse","areaSeries","itemInput","setItemInput","templateID","setTemplateID","collectionName","setCollectionName","templateName","templateImage","setTemplateImage","issuedSupply","setIssuedSupply","lastSalePrice","setLastSalePrice","marketCap","setMarketCap","imgURLBase","formatFloat","float","precision","Intl","NumberFormat","maximumFractionDigits","minimumFractionDigits","format","getMinMax","arr","min","max","i","length","useEffect","current","createChart","width","clientWidth","height","clientHeight","handleScroll","handleScale","layout","backgroundColor","textColor","grid","vertLines","color","visible","labelVisible","horzLines","crosshair","mode","CrosshairMode","Normal","priceScale","borderColor","autoScale","timeScale","timeVisible","secondsVisible","addAreaSeries","setTimeout","prevstate","apiSalesURL","apiTemplateURL","a","axios","get","then","response","JSON","stringify","data","setData","responseCount","price","allSalePrices","parseFloat","toFixed","forEach","sale","formattedPrice","push","update","time","block_time","value","minMax","applyOptions","autoscaleInfoProvider","priceRange","minValue","maxValue","fitContent","catch","error","collection","name","template","immutable_data","img","issued_supply","console","log","parseInt","fetchData","ResizeObserver","entries","contentRect","observe","disconnect","style","paddingTop","paddingBottom","Grid","container","align","justifyContent","alignItems","item","xs","sm","md","className","src","alt","action","onSubmit","e","preventDefault","target","elements","htmlFor","type","onChange","event","placeholder","id","textAlign","borderRadius","border","borderTopLeftRadius","borderBottomLeftRadius","Button","variant","fontSize","borderTopRightRadius","borderBottomRightRadius","ref","App","basename","process","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26f04ac2.chunk.js","sourcesContent":["export function accountURL(accountInput) {\n  const URLSchematic = \"https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={{walletAddres}}\";\n  return URLSchematic.replace('{{walletAddres}}',accountInput)\n}\nexport function baseURL(accountInput) {\n  const URLSchematic = \"https://wax.api.atomicassets.io/atomicassets/v1/assets?owner={{walletAddres}}\";\n  return URLSchematic.replace('{{walletAddres}}',accountInput)\n}\n\nexport function templateSalesURL(templateInput) {\n  const URLSchematic = \"https://wax.api.atomicassets.io/atomicmarket/v1/prices/sales?template_id={{templateID}}\";\n  return URLSchematic.replace('{{templateID}}',templateInput)\n}\n\nexport function templateDataURL(templateInput) {\n  const URLSchematic = \"https://wax.api.atomicassets.io/atomicassets/v1/assets?template_id={{templateID}}&page=1&limit=1&order=desc&sort=asset_id\";\n  return URLSchematic.replace('{{templateID}}',templateInput)\n}","import React, { useEffect, useRef, useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nimport { createChart, CrosshairMode } from 'lightweight-charts';\nimport axios from 'axios'\nimport { templateSalesURL, templateDataURL } from './services/GenerateURL';\nimport './styles.css';\n\nconst ChartArea = () => {\n  const chartContainerRef = useRef();\n  const chart = useRef();\n  const resizeObserver = useRef();\n  const [timer, setTimer] = useState(0);\n  const [apiResponse, setApiResponse] = useState([]);\n  let areaSeries = useRef();\n  const [itemInput, setItemInput] = useState('');\n  const [templateID, setTemplateID] = useState('');\n  const [collectionName, setCollectionName] = useState('');\n  const [templateName, setTemplateName] = useState('');\n  const [templateImage, setTemplateImage] = useState('');\n  const [issuedSupply, setIssuedSupply] = useState('');\n  const [lastSalePrice, setLastSalePrice] = useState('');\n  const [marketCap, setMarketCap] = useState('');\n  // const imgURLBase = \"https://ipfs.atomichub.io/ipfs/\";\n  const imgURLBase = \"https://resizer.atomichub.io/images/v1/preview?ipfs=\";\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const templateInput = e.target.elements[0].value;\n    setTemplateID(templateInput)\n  }\n\n  function formatFloat(float, precision) {\n    let formattedFloat;\n    formattedFloat = new Intl.NumberFormat('en',{ \n      maximumFractionDigits: precision, \n      minimumFractionDigits: precision, \n    }).format(float)\n    return formattedFloat\n  }\n\n  function getMinMax(arr) {\n    let min = arr[0];\n    let max = arr[0];\n    let i = arr.length;\n    while (i--) {\n      min = arr[i] < min ? arr[i] : min;\n      max = arr[i] > max ? arr[i] : max;\n    }\n    return { min, max };\n  }\n\n  useEffect(() => {\n    chart.current = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: chartContainerRef.current.clientHeight,\n      handleScroll: true,\n      handleScale: true,\n      layout: {\n        backgroundColor: '#253248',\n        textColor: 'rgba(255, 255, 255, 0.9)',\n      },\n      grid: {\n        vertLines: {\n          color: '#334158',\n          visible: false,\n          labelVisible: false,\n        },\n        horzLines: {\n          color: '#334158',\n          visible: false,\n          labelVisible: false,\n        },\n      },\n      crosshair: {\n        mode: CrosshairMode.Normal,\n      },\n      priceScale: {\n        borderColor: '#485c7b',\n        autoScale: true,\n      },\n      timeScale: {\n        borderColor: '#485c7b',\n        timeVisible: true,\n        secondsVisible: false,\n      },\n    });\n    areaSeries.current = chart.current.addAreaSeries({});\n  }, []);\n\n  useEffect(() => {\n      setTimeout(() =>{\n          setTimer(prevstate => prevstate+1);\n      }, 5000)\n  }, [timer])\n\n  useEffect(() => {\n    const defaultTemplateID = 19553\n    let apiSalesURL =''\n    let apiTemplateURL =''\n    if (templateID === ''){\n      apiSalesURL = templateSalesURL(defaultTemplateID)\n      apiTemplateURL = templateDataURL(defaultTemplateID)\n    } else {\n      apiSalesURL = templateSalesURL(parseInt(templateID))\n      apiTemplateURL = templateDataURL(parseInt(templateID))\n    }\n    async function fetchData(){\n     // GET last sales data for template + store last sale value to state\n      axios.get(apiSalesURL)\n        .then((response) => {\n          if (JSON.stringify(response.data.data) !== JSON.stringify(apiResponse)){\n            areaSeries.current.setData([])\n            setApiResponse(response.data.data)\n            let responseCount = response.data.data.length-1\n            let lastSalePrice = response.data.data[responseCount].price / 100000000\n            let allSalePrices = []\n            setLastSalePrice(parseFloat(lastSalePrice).toFixed(2))\n            response.data.data.forEach(function(sale) { \n              const formattedPrice = (sale.price / 100000000).toFixed(2);\n              allSalePrices.push(parseFloat(formattedPrice))\n              areaSeries.current.update(\n                { time: sale.block_time/1000, value: formattedPrice },\n              )\n            });\n            let minMax = getMinMax(allSalePrices)\n            areaSeries.current.applyOptions({\n              autoscaleInfoProvider: () => ({\n                  priceRange: {\n                      minValue: minMax.min,\n                      maxValue: minMax.max,\n                  },\n              }),\n            });\n            // setTimeout(() => {\n              chart.current.timeScale().fitContent();\n            // }, 0);\n          }\n        })\n        .catch(function (error){\n        })\n      // GET total supply data for template + store total supply value to state\n      axios.get(apiTemplateURL)\n        .then((response) => {\n          setCollectionName(response.data.data[0].collection.name)\n          // setTemplateName(response.data.data[0].template.immutable_data.name)\n          setTemplateImage(imgURLBase+response.data.data[0].template.immutable_data.img+\"&size=370\")          \n          setTemplateImage(imgURLBase+response.data.data[0].template.immutable_data.img)\n          setIssuedSupply(response.data.data[0].template.issued_supply)\n        })\n        .catch(function (error){\n          console.log(error)\n        })\n    };\n    fetchData();\n    console.log('fetched')\n  }, [timer,templateID])\n\n  useEffect(()=>{\n    if(lastSalePrice === \"\" || issuedSupply === \"\"){\n      return\n    } else {\n      // Calculate and format market cap \n      let marketCap = parseFloat(lastSalePrice*issuedSupply).toFixed(2)\n      setMarketCap(marketCap)\n    }\n  }, [lastSalePrice, issuedSupply])\n\n  // Resize chart on container resizes.\n  useEffect(() => {\n    resizeObserver.current = new ResizeObserver(entries => {\n      const { width, height } = entries[0].contentRect;\n      chart.current.applyOptions({ width, height });\n      setTimeout(() => {\n        chart.current.timeScale().fitContent();\n      }, 0);\n    });\n    resizeObserver.current.observe(chartContainerRef.current);\n    return () => resizeObserver.current.disconnect();\n  }, []);\n\n  return (\n    <>\n    <div style={{paddingTop:15,paddingBottom:15, backgroundColor:\"#253248\", color:\"white\", }}>\n      <Grid container align = \"center\" justifyContent = \"center\" alignItems = \"center\">\n        <Grid item xs={12} sm={12} md={2} className=\"grid-item\">\n          <code>{collectionName}</code>          \n          <h3>{templateName}</h3>\n        </Grid>\n        <Grid item xs={12} sm={12} md={1} className=\"grid-item\">\n          <img src={templateImage} alt={templateName} width=\"100px\"/>\n        </Grid>\n        <Grid item xs={12} sm={4} md={2} className=\"grid-item\">\n          <code>Supply</code>\n          <h3>{formatFloat(issuedSupply, 0)}</h3>\n        </Grid>\n        <Grid item xs={12} sm={4} md={2} className=\"grid-item\">\n          <code>Last Sale Price</code>\n          <h3>{formatFloat(lastSalePrice, 2)} WAX</h3>\n        </Grid>\n        <Grid item xs={12} sm={4} md={2} className=\"grid-item\">\n          <code>Market Cap</code>\n          <h3>{formatFloat(marketCap, 2)} WAX</h3> \n        </Grid>\n        <Grid item xs={12} sm={12} md={3} className=\"grid-item\">\n          <form action=\"\" onSubmit={handleSubmit}>\n            <label htmlFor=\"\">\n              <input type=\"text\" onChange={event => setItemInput(event.target.value)} value={itemInput} placeholder=\"Enter Template ID\" name=\"\" id=\"\" style={{height: 31, width: 115, textAlign: 'center', borderRadius: '0px', border: 'none', borderTopLeftRadius:\"2px\",borderBottomLeftRadius:\"2px\"}} />\n            </label>    \n            <Button variant=\"contained\" color=\"primary\" type=\"submit\" style={{borderRadius: \"0px\",backgroundColor: \"#2b8660\", fontSize:\"12px\",borderTopRightRadius:\"2px\",borderBottomRightRadius:\"2px\"}}>\n              <code>Search</code>\n            </Button>\n          </form>\n        </Grid>\n      </Grid>\n    </div>\n    <div ref={chartContainerRef} className=\"chart-container\" />\n    </>\n  );\n}\n\nexport default ChartArea","import './App.css';\nimport ChartArea from './components/ChartArea';\nimport { HashRouter as Router } from 'react-router-dom'\nimport {Switch, Route} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <>\n    <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route exact path=\"/\">\n                <div className=\"App\">\n                    <ChartArea />\n                </div>\n            </Route>\n        </Switch>\n    </Router>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\nReactDOM.render(\n  <App />, \ndocument.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}